package leetcode.easy;

import java.util.Stack;

/**
 * Класс для проверки правильности расстановки скобок в строке.
 * <p>
 * Данный класс содержит метод {@code isValid}, который проверяет, является ли строка
 * корректной по правилам сбалансированных скобок. Корректная строка означает, что каждая открывающая
 * скобка имеет соответствующую закрывающую скобку, и скобки правильно вложены.
 * </p>
 */
public class ValidParentheses {

    /**
     * Главный метод для запуска программы. Проверяет корректность расстановки скобок
     * в строке и выводит результат проверки.
     *
     * @param args Аргументы командной строки. Не используются в этом методе.
     */
    public static void main(String[] args) {
        System.out.println(isValid("(){()(})")); // Пример проверки строки на корректность
    }

    /**
     * Проверяет, является ли строка {@code s} корректной по правилам сбалансированных скобок.
     * <p>
     * Корректная строка означает, что каждая открывающая скобка имеет соответствующую
     * закрывающую скобку, и скобки правильно вложены.
     * </p>
     *
     * @param s Строка, содержащая скобки, которую нужно проверить.
     * @return {@code true}, если строка корректна, иначе {@code false}.
     */
    public static boolean isValid(String s) {
        if (s.length() == 1)
            return false; // Одного символа недостаточно для корректной расстановки скобок

        Stack<Character> stack = new Stack<>();
        char[] chars = s.toCharArray();

        for (char aChar : chars) {
            if (aChar == '(' || aChar == '{' || aChar == '[') {
                stack.add(aChar); // Добавляем открывающую скобку в стек
            } else if (aChar == ')' || aChar == '}' || aChar == ']') {
                if (stack.isEmpty())
                    return false; // Если стек пуст, значит нет соответствующей открывающей скобки

                char peek = stack.peek();
                if (peek == '(' && aChar == ')') {
                    stack.pop(); // Открывающая и закрывающая скобка совпадают
                } else if (peek == '{' && aChar == '}') {
                    stack.pop(); // Открывающая и закрывающая скобка совпадают
                } else if (peek == '[' && aChar == ']') {
                    stack.pop(); // Открывающая и закрывающая скобка совпадают
                } else {
                    return false; // Несоответствие открывающей и закрывающей скобок
                }
            }
        }
        return stack.isEmpty(); // Если стек пуст, значит все скобки корректно закрыты
    }
}

